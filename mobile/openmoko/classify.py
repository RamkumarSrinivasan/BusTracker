from mta_data.utils import st_line_locate_point
from django.contrib.gis.geos import LineString, fromstr
import sqlite3
import sys

route = fromstr("LINESTRING(40.848516 -73.93754,40.84846 -73.937601,40.848393 -73.937672,40.848215 -73.937769,40.848209 -73.937772,40.847841 -73.937927,40.847838 -73.937929,40.847711 -73.937975,40.847558 -73.938036,40.84742 -73.938078,40.847109 -73.938173,40.846934 -73.938227,40.846784 -73.938272,40.846367 -73.938399,40.846192 -73.938451,40.846031 -73.938503,40.845989 -73.938516,40.84555 -73.938647,40.845439 -73.93868,40.845333 -73.938705,40.844814 -73.938825,40.844679 -73.938855,40.844616 -73.93887,40.844469 -73.938903,40.8444 -73.938919,40.844075 -73.938994,40.844001 -73.939011,40.843942 -73.939025,40.843806 -73.939056,40.843366 -73.939158,40.843223 -73.939178,40.843056 -73.939201,40.842583 -73.939238,40.842437 -73.939254,40.84168 -73.939335,40.841531 -73.93953,40.841434 -73.939619,40.841335 -73.939693,40.841115 -73.939854,40.840559 -73.94026,40.839915 -73.940731,40.839228 -73.941232,40.838468 -73.941788,40.837846 -73.942242,40.837221 -73.942699,40.8366 -73.943153,40.835974 -73.94361,40.835351 -73.944064,40.834722 -73.944524,40.834102 -73.944977,40.833885 -73.945136,40.833619 -73.945329,40.833478 -73.945432,40.832806 -73.945921,40.831512 -73.946867,40.830887 -73.947323,40.830263 -73.947779,40.829639 -73.948235,40.829016 -73.948689,40.82839 -73.949147,40.827768 -73.949601,40.827145 -73.950057,40.826471 -73.950549,40.825799 -73.951039,40.825177 -73.951494,40.824552 -73.951951,40.823929 -73.952405,40.823305 -73.952861,40.822684 -73.953314,40.822059 -73.953771,40.821428 -73.954232,40.82081 -73.954683,40.820333 -73.955032,40.820136 -73.955168,40.820146 -73.955192,40.820168 -73.955245,40.820197 -73.955314,40.821024 -73.957274,40.821083 -73.95739,40.82112 -73.957462,40.821087 -73.957683,40.821078 -73.957732,40.821055 -73.957836,40.821037 -73.957897,40.821019 -73.957946,40.820982 -73.958017,40.820935 -73.958092,40.820895 -73.958152,40.820851 -73.958207,40.82081 -73.958251,40.820782 -73.958279,40.820755 -73.958305,40.820695 -73.958352,40.820618 -73.958412,40.820595 -73.958429,40.820396 -73.958575,40.820132 -73.958769,40.820002 -73.958865,40.820006 -73.958874,40.819411 -73.959313,40.819384 -73.959333,40.81938 -73.959324,40.819255 -73.959417,40.818759 -73.959775,40.818767 -73.959792,40.818759 -73.959775,40.818551 -73.959925,40.817511 -73.960687,40.816861 -73.961163,40.816719 -73.961252,40.816718 -73.961252,40.81664 -73.961364,40.816571 -73.961464,40.816424 -73.961679,40.816346 -73.961796,40.81628 -73.961895,40.816244 -73.961964,40.816206 -73.962025,40.816158 -73.962085,40.816079 -73.962169,40.815919 -73.962305,40.815741 -73.962426,40.815462 -73.962581,40.814502 -73.963073,40.813361 -73.963692,40.813189 -73.963777,40.813042 -73.963831,40.812846 -73.963883,40.812711 -73.963904,40.812627 -73.963909,40.812548 -73.963911,40.812537 -73.96391,40.812369 -73.963905,40.812045 -73.963902,40.811798 -73.963922,40.811623 -73.963954,40.811445 -73.964015,40.811351 -73.964075,40.809639 -73.965314,40.808937 -73.965835,40.808846 -73.965905,40.808819 -73.965926,40.808694 -73.966063,40.808586 -73.966201,40.808441 -73.966381,40.808328 -73.966512,40.808256 -73.966576,40.808175 -73.966648,40.808002 -73.966792,40.807761 -73.966968,40.807626 -73.967058,40.807292 -73.967281,40.807013 -73.967461,40.806821 -73.967584,40.806644 -73.967688,40.80644 -73.967799,40.806334 -73.967854,40.806109 -73.96797,40.805871 -73.968097,40.805854 -73.968106,40.80578 -73.968145,40.805417 -73.968333,40.805117 -73.968491,40.804881 -73.968613,40.804489 -73.96884,40.804132 -73.96908,40.803845 -73.96928,40.803677 -73.969399,40.803246 -73.969704,40.802439 -73.970297,40.802174 -73.970491,40.801081 -73.971289,40.800914 -73.971411,40.800772 -73.971518,40.800589 -73.971631,40.800526 -73.971715,40.800232 -73.972161,40.800096 -73.972353,40.799925 -73.97256,40.799727 -73.972777,40.799532 -73.972956,40.799408 -73.97307,40.799126 -73.973318,40.798773 -73.973614,40.798722 -73.973657,40.798632 -73.973725,40.798436 -73.973864,40.79828 -73.973962,40.798127 -73.974037,40.79797 -73.974094,40.7979 -73.974111,40.797764 -73.974144,40.797579 -73.974159,40.79743 -73.974148,40.797069 -73.974098,40.796865 -73.974115,40.796589 -73.974255,40.79631 -73.974565,40.79616 -73.974796,40.796069 -73.974947,40.795971 -73.97511,40.795913 -73.975206,40.795677 -73.975599,40.795644 -73.975655,40.795611 -73.975715,40.795608 -73.975723,40.795482 -73.976084,40.795198 -73.976324,40.794957 -73.976499,40.79482 -73.976582,40.794672 -73.97666,40.794532 -73.976725,40.794379 -73.976785,40.79415 -73.976856,40.793919 -73.976903,40.793726 -73.97692,40.793233 -73.976934,40.792846 -73.976999,40.792724 -73.977092,40.792577 -73.977203,40.792366 -73.977402,40.792293 -73.977485,40.792255 -73.977539,40.792163 -73.977691,40.792092 -73.977814,40.792057 -73.977888,40.791829 -73.978495,40.791752 -73.97867,40.791678 -73.978831,40.791566 -73.979031,40.791501 -73.979131,40.791422 -73.979234,40.7914 -73.97926,40.791352 -73.97931,40.791347 -73.979315,40.791245 -73.979395,40.791109 -73.979503,40.790614 -73.979862,40.789941 -73.980357,40.789255 -73.980853,40.789179 -73.980903,40.789119 -73.980933,40.788914 -73.98101,40.788765 -73.981043,40.788507 -73.981062,40.787767 -73.981142,40.787694 -73.981143,40.786916 -73.981229,40.786645 -73.981256,40.786507 -73.981288,40.786344 -73.981354,40.786184 -73.981448,40.786091 -73.98151,40.785977 -73.981606,40.785591 -73.982004,40.784971 -73.982655,40.78482 -73.982805,40.784352 -73.983297,40.784248 -73.983411,40.783774 -73.983901,40.78334 -73.984334,40.783272 -73.984394,40.783192 -73.984452,40.783087 -73.984527,40.783081 -73.98453,40.782483 -73.984779,40.781781 -73.985072,40.781078 -73.98537,40.780644 -73.985552,40.780463 -73.985601,40.780459 -73.985602,40.780458 -73.985601,40.780451 -73.985605,40.780434 -73.985606,40.78042 -73.985612,40.780313 -73.985679,40.78021 -73.985418,40.78017 -73.985335,40.779808 -73.984476,40.779764 -73.984372,40.778842 -73.982188,40.778819 -73.98213,40.778786 -73.982045,40.778692 -73.982068,40.77865 -73.982078,40.778524 -73.982112,40.778301 -73.982141,40.778168 -73.982153,40.778081 -73.982168,40.777953 -73.98219,40.777819 -73.982195,40.777153 -73.982218,40.776342 -73.982246,40.775536 -73.982274,40.774723 -73.982303,40.773917 -73.982331,40.77307 -73.982313,40.773005 -73.982311,40.772939 -73.98231,40.772907 -73.982309,40.772871 -73.982308,40.77272 -73.982305,40.772613 -73.982303,40.772249 -73.982295,40.771439 -73.982268,40.770612 -73.982241,40.769783 -73.982214,40.768939 -73.982205,40.768644 -73.982198,40.768433 -73.982191,40.768374 -73.982307,40.76834 -73.982365,40.768306 -73.982402,40.768275 -73.982426,40.768238 -73.982448,40.7682 -73.982465,40.768146 -73.982476,40.768103 -73.982476,40.76806 -73.982471,40.768012 -73.982454,40.767977 -73.982433,40.767943 -73.982406,40.767893 -73.982355,40.767818 -73.982287,40.767734 -73.982221,40.76772 -73.982209,40.767681 -73.982153,40.76766 -73.982102,40.767656 -73.982085,40.767645 -73.982043,40.767633 -73.981974,40.76763 -73.981944,40.76763 -73.981881,40.767633 -73.981797,40.767635 -73.981732,40.767645 -73.981636,40.767723 -73.981498,40.767744 -73.98146,40.767761 -73.981437,40.767782 -73.981412,40.767806 -73.981388,40.767835 -73.981363,40.766946 -73.979242,40.766927 -73.979198,40.766876 -73.979077,40.766821 -73.978946,40.765756 -73.976422,40.765675 -73.976234,40.765606 -73.976068,40.764642 -73.973781,40.764635 -73.973767,40.76457 -73.973636,40.764515 -73.973527,40.764511 -73.973517,40.764479 -73.973439,40.764367 -73.973165,40.764279 -73.973015,40.764171 -73.973093,40.763756 -73.973394,40.763661 -73.973463,40.763659 -73.973465,40.762967 -73.973968,40.762873 -73.974035,40.762871 -73.974037,40.76286 -73.97405,40.762859 -73.974051,40.76285 -73.974058,40.762293 -73.974457,40.761667 -73.974915,40.76104 -73.975374,40.760419 -73.97583,40.759787 -73.976289,40.759165 -73.976745,40.758538 -73.9772,40.757911 -73.977655,40.757284 -73.978116,40.7568 -73.978462,40.756655 -73.978565,40.756032 -73.979024,40.75573 -73.979246,40.755405 -73.979483,40.754783 -73.979936,40.754155 -73.980396,40.753481 -73.980887,40.752814 -73.981371,40.752197 -73.981822,40.751577 -73.982275,40.750959 -73.982724,40.750342 -73.983174,40.749939 -73.983466,40.749808 -73.98356,40.749724 -73.983621,40.749654 -73.983673,40.749188 -73.984013,40.749102 -73.984076,40.749015 -73.98414,40.748548 -73.984481,40.748439 -73.984561,40.748335 -73.984637,40.747846 -73.984993,40.747773 -73.985046,40.747693 -73.985104,40.747234 -73.985436,40.747152 -73.985496,40.747083 -73.985547,40.746617 -73.985889,40.746536 -73.985949,40.746463 -73.986002,40.745997 -73.986338,40.745921 -73.986393,40.745865 -73.986434,40.745372 -73.986793,40.745301 -73.986845,40.745216 -73.986907,40.744761 -73.98724,40.744682 -73.987298,40.744598 -73.987359,40.744131 -73.987699,40.744066 -73.987747,40.744001 -73.987793,40.743518 -73.988144,40.743517 -73.988144,40.743451 -73.988194,40.743319 -73.988271,40.743077 -73.988464,40.742814 -73.988644,40.742948 -73.988958,40.742957 -73.988984,40.74303 -73.989155,40.74297 -73.989161,40.742591 -73.989198,40.742436 -73.989214,40.742276 -73.989229,40.741958 -73.989292,40.741913 -73.98931,40.741812 -73.98935,40.741774 -73.989365,40.741615 -73.98951,40.741544 -73.989568,40.741426 -73.989667,40.74088 -73.99007,40.740262 -73.990518,40.739673 -73.990945,40.739088 -73.991374,40.738504 -73.991798,40.737917 -73.992225,40.73733 -73.992654,40.736691 -73.99312,40.736216 -73.993463,40.736005 -73.993617,40.735313 -73.994119,40.735104 -73.994263,40.734673 -73.994585,40.734034 -73.99505,40.733436 -73.99549,40.732919 -73.995868,40.732847 -73.995914,40.732347 -73.996278,40.732255 -73.996351,40.731596 -73.994789,40.731276 -73.994036,40.730945 -73.993249,40.730591 -73.992408,40.730079 -73.992841,40.72958 -73.993262,40.729354 -73.993452,40.729007 -73.993747,40.728412 -73.994253,40.727819 -73.994751,40.727211 -73.99527,40.726527 -73.995844,40.72648 -73.995883,40.725545 -73.996676,40.725489 -73.996724,40.725505 -73.996847,40.72586 -73.997561,40.725897 -73.997635,40.72623 -73.998307,40.726605 -73.999064,40.726645 -73.999144,40.726998 -73.999862)")

def fix_intersection_lat_long(conn):
    
    conn.execute("""update location set latitude=longitude,
longitude=latitude where intersection != '';""")
    conn.commit()


#steps:
#read a set of location and intersection observations in.
#compute a distance for each observation using st_line_locate_point
#figure out which location observations would be thrown out.


location_conn = sqlite3.connect('location.db')

#only do this once
#fix_intersection_lat_long(location_conn)

print """<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://earth.google.com/kml/2.2">
<Document>

    <Style id="accepted">
      <IconStyle>
        <Icon>
          <href>http://maps.google.com/mapfiles/kml/paddle/wht-blank.png</href>
        </Icon>
      </IconStyle>
    </Style>

    <Style id="rejected">
      <IconStyle>
        <Icon>
          <href>http://maps.google.com/mapfiles/kml/paddle/blu-blank.png</href>
        </Icon>
      </IconStyle>
    </Style>
"""

def classify_locations_by_intersection(conn):
    curs = conn.cursor()
    curs.execute("""select latitude, longitude, time, intersection from
    location where bus_id = 234105 order by time""")

    intersections = []
    locations = []

    for result in curs.fetchall():
        latitude, longitude, time, intersection = result
        location = (latitude, longitude)
        point = dict(latitude=latitude,
                     longitude=longitude,
                     distance=st_line_locate_point(route, location),
                     time=time)
        if intersection:
            intersections.append(point)
        else:
            locations.append(point)

    prev_intersection = intersections[0]
    next_intersection = intersections[1]
    i = 1
    rejected = 0
    accepted = 0
    start_time = locations[0]['time']
    for point in locations:
        if point['time'] < prev_intersection['time']:
            continue #silently reject because it is temporally before the bus starts
        while point['time'] > next_intersection['time']:
            #advance intersections to match time
            prev_intersection = next_intersection
            i += 1
            if i < len(intersections):
                next_intersection = intersections[i]
                break
        #check distance against intersection distances

        if prev_intersection['distance'] <= point['distance'] <= next_intersection['distance']:
            accepted += 1
            style = "accepted"
        else:
            rejected += 1
            style = "rejected"

        print """
                <Placemark>
        <name>%s - %s</name>
        <styleUrl>#%s</styleUrl>
        <Point>
            <coordinates>
                %s, %s
            </coordinates>
        </Point>

    </Placemark>
""" % (point['time'] - start_time, style, style, point['longitude'], point['latitude'])

    print "</Document></kml>"
    print >>sys.stderr, "accepted, rejected, total", accepted, rejected, len(locations)

classify_locations_by_intersection(location_conn)


